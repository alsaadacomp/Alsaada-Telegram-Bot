generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Company {
  id                 Int          @id @default(autoincrement())
  name               String
  nameEn             String?
  commercialRegister String?
  taxId              String?
  insuranceNumber    String?
  address            String?
  addressEn          String?
  governorateId      Int?
  city               String?
  country            String?
  postalCode         String?
  phone              String?
  phone2             String?
  fax                String?
  mobile             String?
  email              String?
  email2             String?
  website            String?
  facebook           String?
  twitter            String?
  linkedin           String?
  instagram          String?
  logo               String?
  description        String?
  establishedYear    Int?
  legalForm          String?
  capital            Float?
  currency           String?
  bankAccounts       Json?
  taxOffice          String?
  taxRecord          String?
  chamberOfCommerce  String?
  ceo                String?
  ceoPhone           String?
  accountant         String?
  accountantPhone    String?
  notes              String?
  isActive           Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  createdBy          Int?
  updatedBy          Int?
  timezone           String?      @default("Africa/Cairo")
  Branch             Branch[]
  governorate        Governorate? @relation("CompanyGovernorate", fields: [governorateId], references: [id])
  equipment          Equipment[]
  employees          Employee[]
  Project            Project[]

  @@index([isActive])
  @@index([name])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([establishedYear])
  @@index([legalForm])
  @@index([governorateId])
  @@index([city])
  @@index([country])
  @@index([createdAt])
  @@index([name, isActive])
}

model Branch {
  id           Int       @id @default(autoincrement())
  companyId    Int
  name         String
  code         String?
  address      String?
  city         String?
  region       String?
  phone        String?
  mobile       String?
  email        String?
  manager      String?
  managerPhone String?
  type         String?
  capacity     Int?
  openingDate  DateTime?
  isActive     Boolean   @default(true)
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    Int?
  updatedBy    Int?
  addressEn    String?
  country      String?
  email2       String?
  fax          String?
  nameEn       String?
  phone2       String?
  postalCode   String?
  website      String?
  Company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([name])
  @@index([companyId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([type])
  @@index([capacity])
  @@index([city])
  @@index([country])
  @@index([createdAt])
  @@index([companyId, isActive])
}

model Project {
  id                    Int               @id @default(autoincrement())
  companyId             Int
  name                  String
  code                  String?
  description           String?
  clientName            String?
  clientPhone           String?
  clientEmail           String?
  location              String?
  city                  String?
  region                String?
  contractValue         Float?
  currency              String?
  paidAmount            Float?
  remainingAmount       Float?
  startDate             DateTime?
  endDate               DateTime?
  actualEndDate         DateTime?
  projectManager        String?
  engineer              String?
  supervisor            String?
  status                String?
  progress              Int?
  priority              String?
  type                  String?
  category              String?
  isActive              Boolean           @default(true)
  notes                 String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  createdBy             Int?
  updatedBy             Int?
  descriptionEn         String?
  nameEn                String?
  equipmentInUse        Equipment[]       @relation("ProjectEquipment")
  shiftAssignments      ShiftAssignment[]
  equipmentUsageRecords EquipmentUsage[]
  Company               Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([endDate])
  @@index([startDate])
  @@index([isActive])
  @@index([status])
  @@index([name])
  @@index([companyId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([priority])
  @@index([type])
  @@index([category])
  @@index([city])
  @@index([region])
  @@index([createdAt])
  @@index([companyId, isActive])
}

model User {
  id                                       Int                      @id @default(autoincrement())
  telegramId                               BigInt                   @unique
  username                                 String?                  @unique
  fullName                                 String?
  nickname                                 String?
  phone                                    String?
  email                                    String?
  role                                     Role                     @default(GUEST)
  isActive                                 Boolean                  @default(true)
  isBanned                                 Boolean                  @default(false)
  bannedAt                                 DateTime?
  bannedReason                             String?
  bannedBy                                 Int?
  customPermissions                        Json?
  department                               String?
  position                                 String?
  notes                                    String?
  lastActiveAt                             DateTime?                @updatedAt
  createdAt                                DateTime                 @default(now())
  updatedAt                                DateTime                 @updatedAt
  JoinRequest_JoinRequest_userIdToUser     JoinRequest?             @relation("JoinRequest_userIdToUser")
  JoinRequest_JoinRequest_rejectedByToUser JoinRequest[]            @relation("JoinRequest_rejectedByToUser")
  JoinRequest_JoinRequest_approvedByToUser JoinRequest[]            @relation("JoinRequest_approvedByToUser")
  notificationPreferences                  NotificationPreferences?
  receivedNotifications                    NotificationRecipient[]
  createdTemplates                         NotificationTemplate[]   @relation("TemplateCreator")
  roleChangedBy                            RoleChange[]             @relation("ChangedByUser")
  roleChanges                              RoleChange[]             @relation("UserRoleChanges")
  auditLogs                                AuditLog[]               @relation("UserAuditLogs")

  @@index([isActive])
  @@index([role])
  @@index([telegramId])
  @@index([username])
  @@index([bannedBy])
  @@index([department])
  @@index([position])
  @@index([lastActiveAt])
  @@index([email])
  @@index([phone])
  @@index([createdAt])
  @@index([role, isActive])
}

model JoinRequest {
  id                                Int           @id @default(autoincrement())
  telegramId                        BigInt        @unique
  username                          String?
  fullName                          String
  nickname                          String?
  phone                             String
  status                            RequestStatus @default(PENDING)
  requestedAt                       DateTime      @default(now())
  respondedAt                       DateTime?
  approvedBy                        Int?
  rejectedBy                        Int?
  rejectionReason                   String?
  notes                             String?
  userId                            Int?          @unique
  User_JoinRequest_userIdToUser     User?         @relation("JoinRequest_userIdToUser", fields: [userId], references: [id])
  User_JoinRequest_rejectedByToUser User?         @relation("JoinRequest_rejectedByToUser", fields: [rejectedBy], references: [id])
  User_JoinRequest_approvedByToUser User?         @relation("JoinRequest_approvedByToUser", fields: [approvedBy], references: [id])

  @@index([requestedAt])
  @@index([status])
  @@index([telegramId])
  @@index([approvedBy])
  @@index([rejectedBy])
  @@index([respondedAt])
  @@index([fullName])
  @@index([phone])
  @@index([nickname])
  @@index([status, requestedAt])
}

model RoleChange {
  id            Int      @id @default(autoincrement())
  userId        Int
  oldRole       Role
  newRole       Role
  changedBy     Int
  reason        String?
  createdAt     DateTime @default(now())
  changedByUser User     @relation("ChangedByUser", fields: [changedBy], references: [id])
  user          User     @relation("UserRoleChanges", fields: [userId], references: [id], onDelete: Cascade)

  @@index([changedBy])
  @@index([userId])
  @@index([createdAt])
  @@index([oldRole])
  @@index([newRole])
  @@index([reason])
  @@index([changedBy, createdAt])
  @@index([userId, createdAt])
  @@index([oldRole, newRole])
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isActive])
  @@index([name])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([category, isActive])
  @@index([name, isActive])
}

model NotificationPreferences {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  enabled           Boolean  @default(true)
  types             Json?
  priorities        Json?
  quietHoursEnabled Boolean  @default(false)
  quietHoursStart   String?
  quietHoursEnd     String?
  channels          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([enabled])
  @@index([quietHoursEnabled])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([userId, enabled])
  @@index([enabled, quietHoursEnabled])
}

model Notification {
  id              String                  @id
  message         String
  type            NotificationType        @default(INFO)
  priority        NotificationPriority    @default(NORMAL)
  status          GeneralStatus           @default(PENDING)
  targetAudience  String
  targetRole      String?
  targetUserIds   Json?
  data            Json?
  buttons         Json?
  image           String?
  parseMode       String?                 @default("HTML")
  scheduledAt     DateTime?
  sentAt          DateTime?
  recurring       Boolean                 @default(false)
  recurringConfig Json?
  templateId      String?
  failureReason   String?
  successCount    Int                     @default(0)
  failureCount    Int                     @default(0)
  metadata        Json?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  recipients      NotificationRecipient[]

  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([targetAudience])
  @@index([scheduledAt])
  @@index([sentAt])
  @@index([createdAt])
  @@index([templateId])
  @@index([status, createdAt])
  @@index([type, priority])
}

model NotificationRecipient {
  id             Int          @id @default(autoincrement())
  notificationId String
  userId         Int
  status         GeneralStatus @default(PENDING)
  sentAt         DateTime?
  failureReason  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
  @@index([notificationId])
  @@index([userId])
  @@index([status])
  @@index([sentAt])
  @@index([createdAt])
  @@index([failureReason])
  @@index([updatedAt])
  @@index([notificationId, status])
  @@index([userId, status])
}

model NotificationTemplate {
  id        String               @id @default(cuid())
  name      String               @unique
  message   String
  type      NotificationType     @default(INFO)
  priority  NotificationPriority @default(NORMAL)
  variables Json?
  buttons   Json?
  isActive  Boolean              @default(true)
  createdBy Int?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  creator   User?                @relation("TemplateCreator", fields: [createdBy], references: [id])

  @@index([isActive])
  @@index([type])
  @@index([priority])
  @@index([createdBy])
  @@index([name])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([isActive, type])
  @@index([type, priority])
}

model Setting {
  id          Int             @id @default(autoincrement())
  key         String
  value       String
  scope       SettingScope    @default(GLOBAL)
  category    SettingCategory @default(SYSTEM)
  type        SettingType
  userId      Int?            @default(0)
  featureId   String?         @default("")
  description String?
  isSecret    Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  updatedBy   Int?

  @@unique([key, scope, userId, featureId])
  @@index([featureId])
  @@index([userId])
  @@index([category])
  @@index([scope])
  @@index([key])
  @@index([updatedBy])
  @@index([isSecret])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([category, scope])
  @@index([key, scope])
}

model Department {
  id          Int        @id @default(autoincrement())
  name        String
  nameEn      String?
  code        String     @unique
  description String?
  managerId   Int?
  orderIndex  Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   Int?
  updatedBy   Int?
  employees   Employee[]
  positions   Position[]

  @@index([code])
  @@index([isActive])
  @@index([orderIndex])
  @@index([name])
  @@index([createdAt])
  @@map("HR_Department")
}

model Position {
  id           Int        @id @default(autoincrement())
  title        String
  titleAr      String
  code         String     @unique
  description  String?
  departmentId Int
  orderIndex   Int        @default(0)
  isActive     Boolean    @default(true)
  defaultWorkDaysPerCycle  Int?
  defaultLeaveDaysPerCycle Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  createdBy    Int?
  updatedBy    Int?
  employees    Employee[]
  department   Department @relation(fields: [departmentId], references: [id])

  @@index([code])
  @@index([departmentId])
  @@index([isActive])
  @@index([title])
  @@index([titleAr])
  @@index([createdAt])
  @@map("HR_Position")
}

model Governorate {
  id         Int        @id @default(autoincrement())
  nameAr     String     @unique
  nameEn     String     @unique
  code       String     @unique
  region     String?
  orderIndex Int        @default(0)
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  companies  Company[]  @relation("CompanyGovernorate")
  employees  Employee[] @relation("EmployeeGovernorate")

  @@index([nameAr])
  @@index([nameEn])
  @@index([code])
  @@index([isActive])
  @@index([orderIndex])
  @@index([region])
  @@map("Location_Governorate")
}

model Employee {
  id                       Int               @id @default(autoincrement())
  employeeCode             String            @unique
  fullName                 String
  fullNameEn               String?
  nickname                 String?
  nationalId               String            @unique
  passportNumber           String?
  gender                   Gender
  dateOfBirth              DateTime
  placeOfBirth             String?
  nationality              String
  maritalStatus            MaritalStatus
  religion                 String?
  bloodType                String?
  personalEmail            String?
  workEmail                String?
  personalPhone            String
  workPhone                String?
  telegramId               String?
  emergencyContactName     String
  emergencyContactPhone    String
  emergencyContactRelation String?
  currentAddress           String
  currentAddressEn         String?
  permanentAddress         String?
  governorateId            Int?
  city                     String
  region                   String?
  country                  String            @default("Egypt")
  postalCode               String?
  companyId                Int
  departmentId             Int
  positionId               Int
  employmentType           EmploymentType
  contractType             ContractType
  employmentStatus         EmploymentStatus  @default(ACTIVE)
  hireDate                 DateTime
  confirmationDate         DateTime?
  resignationDate          DateTime?
  terminationDate          DateTime?
  terminationReason        String?
  basicSalary              Float
  allowances               Float?            @default(0)
  totalSalary              Float
  currency                 String            @default("EGP")
  paymentMethod            PaymentMethod     @default(BANK_TRANSFER)
  bankName                 String?
  bankAccountNumber        String?
  iban                     String?
  transferNumber1          String?
  transferType1            TransferType?
  transferNumber2          String?
  transferType2            TransferType?
  socialInsuranceNumber    String?
  taxNumber                String?
  insuranceStartDate       DateTime?
  directManagerId          Int?
  workSchedule             String?
  workLocation             String?
  educationLevel           EducationLevel?
  major                    String?
  university               String?
  graduationYear           Int?
  yearsOfExperience        Int?              @default(0)
  profilePhoto             String?
  cv                       String?
  nationalIdCardUrl        String?
  annualLeaveBalance       Int               @default(21)
  sickLeaveBalance         Int               @default(180)
  casualLeaveBalance        Int               @default(7)
  attendanceRequired       Boolean           @default(false)
  workDaysPerCycle         Int?
  leaveDaysPerCycle        Int?
  currentWorkDays          Int?              @default(0)
  currentLeaveDays         Int?              @default(0)
  lastLeaveStartDate       DateTime?
  lastLeaveEndDate         DateTime?
  nextLeaveStartDate       DateTime?
  nextLeaveEndDate         DateTime?
  fingerprintId            String?
  notes                    String?
  isActive                 Boolean           @default(true)
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  createdBy                Int?
  updatedBy                Int?

  operatedEquipment        Equipment[]       @relation("EquipmentOperator")
  fuelLogs                 FuelLog[]         @relation("FuelOperator")
  performedMaintenance     MaintenanceRecord[] @relation("MaintenancePerformer")
  shiftAssignments         ShiftAssignment[]   @relation("ShiftOperator")
  equipmentUsages          EquipmentUsage[]    @relation("UsageOperator")
  attendanceExceptions     HR_AttendanceException[]
  directManager            Employee?         @relation("ManagerSubordinates", fields: [directManagerId], references: [id])
  subordinates             Employee[]        @relation("ManagerSubordinates")
  position                 Position          @relation(fields: [positionId], references: [id])
  department               Department        @relation(fields: [departmentId], references: [id])
  company                  Company           @relation(fields: [companyId], references: [id])
  governorate              Governorate?      @relation("EmployeeGovernorate", fields: [governorateId], references: [id])
  advances                 HR_EmployeeAdvance[] @relation("EmployeeAdvances")
  leaveReplacements        HR_EmployeeLeave[] @relation("LeaveReplacements")
  leaves                   HR_EmployeeLeave[] @relation("EmployeeLeaves")
  payrolls                 HR_MonthlyPayroll[] @relation("EmployeePayrolls")
  rotations                HR_WorkRotation[]   @relation("EmployeeRotations")

  skills                   Skill[]
  certifications           Certification[]
  documents                Document[]
  workHistory              WorkExperience[]

  @@index([employeeCode])
  @@index([nationalId])
  @@index([companyId])
  @@index([departmentId])
  @@index([positionId])
  @@index([directManagerId])
  @@index([employmentStatus])
  @@index([employmentType])
  @@index([isActive])
  @@index([hireDate])
  @@index([fullName])
  @@index([nickname])
  @@index([gender])
  @@index([maritalStatus])
  @@index([governorateId])
  @@index([city])
  @@index([country])
  @@index([createdAt])
  @@index([companyId, departmentId])
  @@index([companyId, isActive])
  @@index([departmentId, isActive])
  @@index([employmentStatus, isActive])
  @@map("HR_Employee")
}

model Skill {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employees Employee[]

  @@map("HR_Skill")
}

model Document {
  id         Int      @id @default(autoincrement())
  name       String
  url        String
  type       String
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@map("HR_Document")
}

model Certification {
  id           Int      @id @default(autoincrement())
  name         String
  issuingOrg   String
  issueDate    DateTime
  expiryDate   DateTime?
  credentialId String?
  url          String?
  employeeId   Int
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@map("HR_Certification")
}

model WorkExperience {
  id          Int      @id @default(autoincrement())
  companyName String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@map("HR_WorkExperience")
}

model HR_WorkRotation {
  id           Int           @id @default(autoincrement())
  employeeId   Int
  rotationType String
  startDate    DateTime
  endDate      DateTime
  status       GeneralStatus @default(PLANNED)
  location     String?
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  employee     Employee      @relation("EmployeeRotations", fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([status])
  @@index([startDate, endDate])
}

model HR_EmployeeLeave {
  id              Int           @id @default(autoincrement())
  employeeId      Int
  leaveType       String
  startDate       DateTime
  endDate         DateTime
  totalDays       Int
  reason          String?
  status          GeneralStatus @default(PENDING)
  replacementId   Int?
  approvedBy      Int?
  approvedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  replacement     Employee?     @relation("LeaveReplacements", fields: [replacementId], references: [id])
  employee        Employee      @relation("EmployeeLeaves", fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([status])
  @@index([startDate, endDate])
}

model HR_EmployeeAdvance {
  id                 Int            @id @default(autoincrement())
  employeeId         Int
  amount             Float
  reason             String?
  requestDate        DateTime       @default(now())
  approvalStatus     ApprovalStatus @default(PENDING)
  approvedBy         Int?
  approvedAt         DateTime?
  deductionStartDate DateTime?
  monthlyDeduction   Float?
  remainingBalance   Float?
  isPaid             Boolean        @default(false)
  notes              String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  employee           Employee       @relation("EmployeeAdvances", fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([approvalStatus])
  @@index([isPaid])
}

model HR_MonthlyPayroll {
  id                 Int           @id @default(autoincrement())
  employeeId         Int
  month              Int
  year               Int
  basicSalary        Float
  housingAllowance   Float         @default(0)
  transportAllowance Float         @default(0)
  foodAllowance      Float         @default(0)
  fieldAllowance     Float         @default(0)
  otherAllowances    Float         @default(0)
  advances           Float         @default(0)
  penalties          Float         @default(0)
  absences           Float         @default(0)
  otherDeductions    Float         @default(0)
  grossSalary        Float
  totalDeductions    Float
  netSalary          Float
  paymentStatus      PaymentStatus @default(PENDING)
  paymentDate        DateTime?
  paymentMethod      String?
  notes              String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  employee           Employee      @relation("EmployeePayrolls", fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, month, year])
  @@index([employeeId])
  @@index([month, year])
  @@index([paymentStatus])
}

model HR_AttendanceException {
  id            Int           @id @default(autoincrement())
  employeeId    Int
  date          DateTime
  exceptionType String
  hours         Float?
  reason        String?
  status        GeneralStatus @default(PENDING)
  approvedBy    Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  employee      Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([date])
  @@index([status])
}

model EquipmentCategory {
  id          Int             @id @default(autoincrement())
  nameAr      String          @unique
  nameEn      String          @unique
  code        String          @unique
  description String?
  icon        String?
  orderIndex  Int             @default(0)
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   Int?
  updatedBy   Int?
  types       EquipmentType[]

  @@index([code])
  @@index([isActive])
  @@index([orderIndex])
  @@map("Equipment_Category")
}

model EquipmentType {
  id                       Int                     @id @default(autoincrement())
  categoryId               Int
  nameAr                   String
  nameEn                   String
  code                     String                  @unique
  description              String?
  defaultCapacity          String?
  defaultFuelType          String?
  requiresLicense          Boolean                 @default(false)
  licenseType              String?
  maintenanceTrackingType  MaintenanceTrackingType @default(HOURS)
  oilChangeInterval        Int?
  maintenanceIntervalDays  Int?
  maintenanceIntervalHours Int?
  maintenanceIntervalKm    Int?
  inspectionIntervalDays   Int?
  orderIndex               Int                     @default(0)
  isActive                 Boolean                 @default(true)
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  createdBy                Int?
  updatedBy                Int?
  equipment                Equipment[]
  category                 EquipmentCategory       @relation(fields: [categoryId], references: [id])

  @@index([code])
  @@index([categoryId])
  @@index([isActive])
  @@index([orderIndex])
  @@map("Equipment_Type")
}

model Equipment {
  id                   Int                   @id @default(autoincrement())
  equipmentTypeId      Int
  code                 String                @unique
  nameAr               String
  nameEn               String?
  plateNumber          String?               @unique
  companyId            Int?
  purchaseDate         DateTime?
  purchasePrice        Float?
  currency             String?               @default("EGP")
  supplier             String?
  manufacturer         String?
  model                String?
  yearOfManufacture    Int?
  serialNumber         String?               @unique
  capacity             String?
  fuelType             FuelType?
  engineNumber         String?
  chassisNumber        String?
  color                String?
  status               EquipmentStatus       @default(AVAILABLE)
  condition            EquipmentCondition    @default(GOOD)
  currentLocation      String?
  currentProjectId     Int?
  currentOperatorId    Int?
  lastMaintenanceDate  DateTime?
  nextMaintenanceDate  DateTime?
  maintenanceInterval  Int?
  maintenanceBy        MaintenanceByType     @default(MILEAGE)
  oilChangeInterval    Int?
  lastOilChangeAt      Int?
  nextOilChangeAt      Int?
  totalWorkingHours    Int?                  @default(0)
  currentMileage       Int?                  @default(0)
  lastOilChangeDate    DateTime?
  lastOilChangeMileage Int?
  lastOilChangeHours   Int?
  nextOilChangeDue     Int?
  oilType              String?
  oilCapacity          Float?
  insuranceCompany     String?
  insuranceNumber      String?
  insuranceStartDate   DateTime?
  insuranceEndDate     DateTime?
  licenseNumber        String?
  licenseExpiryDate    DateTime?
  dailyRentalRate      Float?
  hourlyRate           Float?
  fuelConsumptionRate  Float?
  photos               Json?
  documents            Json?
  specifications       Json?
  notes                String?
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  createdBy            Int?
  updatedBy            Int?
  currentOperator      Employee?             @relation("EquipmentOperator", fields: [currentOperatorId], references: [id])
  currentProject       Project?              @relation("ProjectEquipment", fields: [currentProjectId], references: [id])
  company              Company?              @relation(fields: [companyId], references: [id])
  equipmentType        EquipmentType         @relation(fields: [equipmentTypeId], references: [id])
  costs                EquipmentCost[]
  fuelLogs             FuelLog[]
  maintenanceRecords   MaintenanceRecord[]
  maintenanceSchedules MaintenanceSchedule[]
  shiftAssignments     ShiftAssignment[]
  usageRecords         EquipmentUsage[]

  @@index([code])
  @@index([plateNumber])
  @@index([equipmentTypeId])
  @@index([companyId])
  @@index([currentProjectId])
  @@index([currentOperatorId])
  @@index([status])
  @@index([condition])
  @@index([isActive])
  @@index([nextMaintenanceDate])
  @@index([insuranceEndDate])
  @@index([licenseExpiryDate])
  @@index([status, isActive])
  @@index([companyId, status])
  @@map("Equipment")
}

model MaintenanceRecord {
  id                 Int                 @id @default(autoincrement())
  equipmentId        Int
  maintenanceType    MaintenanceType
  maintenanceDate    DateTime
  nextDueDate        DateTime?
  description        String
  workPerformed      String?
  partsReplaced      String?
  laborCost          Float?              @default(0)
  partsCost          Float?              @default(0)
  totalCost          Float
  currency           String              @default("EGP")
  performedBy        String?
  performedById      Int?
  serviceProvider    String?
  invoiceNumber      String?
  mileageBefore      Int?
  mileageAfter       Int?
  workingHoursBefore Int?
  workingHoursAfter  Int?
  conditionBefore    EquipmentCondition?
  conditionAfter     EquipmentCondition?
  photos             Json?
  documents          Json?
  notes              String?
  isWarranty         Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  createdBy          Int?
  updatedBy          Int?
  performer          Employee?           @relation("MaintenancePerformer", fields: [performedById], references: [id])
  equipment          Equipment           @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([equipmentId])
  @@index([maintenanceType])
  @@index([maintenanceDate])
  @@index([nextDueDate])
  @@index([performedById])
  @@index([equipmentId, maintenanceDate])
  @@map("Equipment_Maintenance")
}

model EquipmentUsage {
  id           Int        @id @default(autoincrement())
  equipmentId  Int
  projectId    Int?
  operatorId   Int?
  shift        WorkShift?
  startDate    DateTime
  endDate      DateTime?
  startMileage Int?
  endMileage   Int?
  workingHours Float?
  fuelConsumed Float?
  fuelCost     Float?
  location     String?
  purpose      String?
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  createdBy    Int?
  updatedBy    Int?
  operator     Employee?  @relation("UsageOperator", fields: [operatorId], references: [id])
  project      Project?   @relation(fields: [projectId], references: [id])
  equipment    Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([equipmentId])
  @@index([projectId])
  @@index([operatorId])
  @@index([startDate])
  @@index([endDate])
  @@index([equipmentId, startDate])
  @@map("Equipment_Usage")
}

model EquipmentCost {
  id                  Int            @id @default(autoincrement())
  equipmentId         Int
  costType            CostType
  amount              Float
  currency            String         @default("EGP")
  costDate            DateTime
  description         String?
  supplier            String?
  invoiceNumber       String?
  paymentMethod       PaymentMethod?
  maintenanceRecordId Int?
  notes               String?
  documents           Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  createdBy           Int?
  updatedBy           Int?
  equipment           Equipment      @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([equipmentId])
  @@index([costType])
  @@index([costDate])
  @@index([equipmentId, costDate])
  @@map("Equipment_Cost")
}

model FuelLog {
  id             Int       @id @default(autoincrement())
  equipmentId    Int
  fuelDate       DateTime
  fuelType       FuelType
  quantity       Float
  pricePerUnit   Float
  totalCost      Float
  currency       String    @default("EGP")
  currentMileage Int?
  currentHours   Int?
  operatorId     Int?
  station        String?
  location       String?
  invoiceNumber  String?
  isFull         Boolean   @default(false)
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      Int?
  updatedBy      Int?
  operator       Employee? @relation("FuelOperator", fields: [operatorId], references: [id])
  equipment      Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([equipmentId])
  @@index([fuelDate])
  @@index([operatorId])
  @@index([equipmentId, fuelDate])
  @@map("Equipment_Fuel_Log")
}

model MaintenanceSchedule {
  id                   Int                     @id @default(autoincrement())
  equipmentId          Int
  maintenanceType      MaintenanceType
  title                String
  description          String?
  isRecurring          Boolean                 @default(true)
  intervalType         MaintenanceTrackingType
  intervalValue        Int
  lastPerformedDate    DateTime?
  lastPerformedMileage Int?
  lastPerformedHours   Int?
  nextDueDate          DateTime?
  nextDueMileage       Int?
  nextDueHours         Int?
  estimatedCost        Float?
  estimatedDuration    Float?
  requiredParts        Json?
  requiredOils         Json?
  notifyBeforeDays     Int?                    @default(7)
  notifyBeforeKm       Int?
  notifyBeforeHours    Int?
  priority             MaintenancePriority     @default(NORMAL)
  status               ScheduleStatus          @default(ACTIVE)
  notes                String?
  isActive             Boolean                 @default(true)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  createdBy            Int?
  updatedBy            Int?
  equipment            Equipment               @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([equipmentId])
  @@index([maintenanceType])
  @@index([nextDueDate])
  @@index([status])
  @@index([isActive])
  @@index([equipmentId, status])
  @@map("Equipment_Maintenance_Schedule")
}

model ShiftAssignment {
  id          Int       @id @default(autoincrement())
  equipmentId Int
  operatorId  Int
  shift       WorkShift
  startDate   DateTime
  endDate     DateTime?
  workDays    Json?
  projectId   Int?
  isActive    Boolean   @default(true)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   Int?
  updatedBy   Int?
  project     Project?  @relation(fields: [projectId], references: [id])
  operator    Employee  @relation("ShiftOperator", fields: [operatorId], references: [id], onDelete: Cascade)
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([equipmentId])
  @@index([operatorId])
  @@index([shift])
  @@index([startDate])
  @@index([endDate])
  @@index([isActive])
  @@index([equipmentId, shift, isActive])
  @@map("Equipment_Shift_Assignment")
}

model AuditLog {
  id              Int             @id @default(autoincrement())
  timestamp       DateTime        @default(now())
  model           String
  recordId        String
  action          AuditActionType
  category        String?
  fieldName       String?
  oldValue        String?
  newValue        String?
  changedByUserId Int?
  description     String?
  metadata        Json?

  changedByUser User? @relation("UserAuditLogs", fields: [changedByUserId], references: [id])

  @@index([timestamp])
  @@index([model, recordId])
  @@index([action])
  @@index([category])
  @@index([changedByUserId])
}

enum AuditActionType {
  CREATE
  UPDATE
  DELETE
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
  GUEST
  MODERATOR
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum GeneralStatus {
  PENDING
  APPROVED
  REJECTED
  SENT
  FAILED
  READ
  CANCELLED
  PLANNED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ANNOUNCEMENT
  REMINDER
  ALERT
}

enum NotificationPriority {
  LOW
  NORMAL
  IMPORTANT
  HIGH
  URGENT
  CRITICAL
}

enum SettingScope {
  GLOBAL
  USER
  FEATURE
}

enum SettingCategory {
  SYSTEM
  SECURITY
  PERFORMANCE
  NOTIFICATION
  DATABASE
  LOGGING
  COMPANY
  BOT
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  ARRAY
}

enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERN
  FREELANCE
}

enum ContractType {
  PERMANENT
  FIXED_TERM
  PROBATION
  SEASONAL
}

enum EmploymentStatus {
  ACTIVE
  ON_LEAVE
  SUSPENDED
  RESIGNED
  TERMINATED
  RETIRED
  ON_MISSION
  SETTLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHEQUE
  MOBILE_WALLET
}

enum TransferType {
  INSTAPAY
  CASH
}

enum EducationLevel {
  HIGH_SCHOOL
  DIPLOMA
  BACHELOR
  MASTER
  PHD
  VOCATIONAL
  OTHER
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  REPAIR
  OUT_OF_SERVICE
  RENTED_OUT
  RETIRED
}

enum EquipmentCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
}

enum FuelType {
  DIESEL
  GASOLINE
  ELECTRIC
  HYBRID
  GAS
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  INSPECTION
  OVERHAUL
  OIL_CHANGE
  TIRE_CHANGE
  REPAIR
}

enum CostType {
  FUEL
  MAINTENANCE
  REPAIR
  INSURANCE
  LICENSE
  PARTS
  LABOR
  RENTAL
  DEPRECIATION
  OTHER
}

enum MaintenanceTrackingType {
  DAYS
  HOURS
  KILOMETERS
  BOTH
}

enum WorkShift {
  MORNING
  EVENING
  NIGHT
  FULL_DAY
}

enum MaintenancePriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum ScheduleStatus {
  ACTIVE
  COMPLETED
  OVERDUE
  CANCELLED
  PAUSED
}

enum MaintenanceScheduleType {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  ANNUAL
  BY_MILEAGE
  BY_HOURS
  BY_BOTH
}

enum MaintenanceByType {
  MILEAGE
  HOURS
}

enum ShiftType {
  MORNING
  EVENING
  NIGHT
  FLEXIBLE
}

enum ShiftStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}